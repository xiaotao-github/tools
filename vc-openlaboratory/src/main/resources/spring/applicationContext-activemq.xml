<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
<!--  
activemq.brokerURL=tcp\://192.168.1.102:61616
activemq.username=admin
activemq.password=admin
activemq.pool.maxConnection=20
activemq.queueName=quecontrlqueue
-->
<!--第三方mq工厂:connectionFactory-->
<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
    <property name="brokerURL" value="tcp://0.0.0.0:61616"/>
    <property name="userName" value="admin" />
    <property name="password" value="admin"/>
</bean>
<!--定义连接池
    activemq-all 为我们提供了一个PooledConnectionFactory,通过往里面注入一个ActiveMQConnectionFactory
    可以用来将Connection、Session和MessageProducer池化，大大减少我们的资源消耗
-->
<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
    <property name="connectionFactory" ref="targetConnectionFactory"/>
    <property name="maxConnections" value="20"/>
</bean>
<!--
    Spring用于管理ConnectionFactory的ConnectionFactory
    打个比喻： 上面的targetConnectionFactory是第三方的工厂工人
                pooledConnectionFactory 将第三方的工厂工人进行封装(池化 )
                下面再进行封装  交给Spring进行管理
-->
<bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
    <!--目标ConnectionFactory对应真实的可以产生JMS Connection 的ConnectionFactory-->
    <property name="targetConnectionFactory" ref="pooledConnectionFactory"/>
</bean>

<!--
    注意：从ActimeMQConnectionFactory 到PooledConnectionFactory 再到 SingleConnectionFactory
    其实就是一个适配的过程
-->
    <!--消息的目的地-->
<bean id="msgQueue" class="org.apache.activemq.command.ActiveMQTopic">
    <constructor-arg value="listenequmsg"/>
</bean>
	<bean id="operateClockMachineResultQueue" class="org.apache.activemq.command.ActiveMQQueue">
    <constructor-arg value="operateClockMachineResultQueue"/>
	</bean>

    <!--Spring提供的JMS工具类，它可以进行消息发送，接收等-->
    <!--队列模板-->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!--该connectionFactory对应的是我们定义的spring提供的那个connectionFactory-->
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="defaultDestinationName" value="quecontrlqueue"/>
    </bean>

    <!--配置自定义监听 MessageListener-->
    <bean id="msgQueueMessageListener" class="com.vcooc.experiment.mq.MsgQueueMessageListener"/>
	<!-- 考勤机监听器 -->
	<bean id="clockMachineMsgQueueListener" class="com.vcooc.experiment.mq.ClockMachineMsgQueueListener"/>
   
    <!--将连接工厂，目标队列，自定义监听注入到jms模板-->
    <bean id="sessionAwareListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="destination" ref="msgQueue"/>
        <property name="messageListener" ref="msgQueueMessageListener"/>
    </bean>
    <bean id="clockMachineListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="destination" ref="operateClockMachineResultQueue"/>
        <property name="messageListener" ref="clockMachineMsgQueueListener"/>
    </bean>
    
    <!--
        注意Spring的套路经常是这样的，提供XxxTemplate，比如HibernateTemplate，对于JMS，提供了JmsTemplate。

        生产者应该持有JmsTemplate进行发送消息。

        消费者，提供监听器、监听的目的地、连接工厂即可。
    -->
</beans>